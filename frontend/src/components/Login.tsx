import React, { useState, useRef } from 'react';
import { Form, Button, InputGroup, Alert, Container, Row, Col } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';

import { login } from '../services/api'; // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏–Ω–∞ –∏–∑ api.js
import { User } from '../../../interfaces/User';

const Login: React.FC = () => {
  const [loginname, setLoginname] = useState('');
  const [password, setPassword] = useState('');
  const [serverError, setServerError] = useState<string | null>(null); // –û—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
  const [validated, setValidated] = useState(false);
  const [errors, setErrors] = useState<{ loginname?: string; password?: string }>({});
  const navigate = useNavigate(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è useNavigate
  const loginInputRef = useRef<HTMLInputElement>(null); // –†–µ—Ñ–µ—Ä–µ–Ω—Å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–æ–∫—É—Å–∞ –Ω–∞ –ø–æ–ª–µ loginname

  const handleRegister = () => {
    navigate('/profile'); // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Profile
  };

  const handleRestorePassword = () => {
    navigate('/restore'); // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
  };

  const handleLogin = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault(); // Stoppt das Standard-Formularverhalten
  
    const form = event.currentTarget;
  
    // üîπ Validierungspr√ºfung f√ºr die Form
    if (!form.checkValidity()) {
      event.stopPropagation();
      setValidated(true);
      return;
    }
  
    try {
      // üîπ Login-API-Aufruf
      const userData: User = await login(loginname, password);
  
      if (userData) {
        // ‚úÖ Erfolgreiches Login ‚Üí Speichert kompletten Benutzer in `localStorage`
        setServerError(null);
        localStorage.setItem("user", JSON.stringify(userData));
  
        navigate("/resumes"); // Weiterleitung zur Bewerbungsseite
      } else {
        // ‚ùå Fehlerhafte Anmeldung ‚Üí Zeigt Fehler
        setServerError("Ung√ºltiger Login oder Passwort.");
        setErrors({ loginname: "√úberpr√ºfe den Login", password: "√úberpr√ºfe das Passwort" });
        loginInputRef.current?.focus();
      }
    } catch (error) {
      // ‚ùå Fehlerbehandlung f√ºr API-Probleme
      setServerError("Serverfehler. Bitte sp√§ter erneut versuchen.");
      loginInputRef.current?.focus();
    }
  };

  const handleBlur = () => {
    setErrors({}); // –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –ø—Ä–∏ —É—Ö–æ–¥–µ —Ñ–æ–∫—É—Å–∞
  };

  return (
    <Container className="mt-5">
      <Row className="justify-content-center">
        <Col md={6}>
          <h2 className="text-center mb-4">–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</h2>
          <Form noValidate validated={validated} onSubmit={handleLogin}>
            {/* –ü–æ–ª–µ –ª–æ–≥–∏–Ω–∞ */}
            <Form.Group controlId="formLoginName" className="mb-3">
              <Form.Label>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</Form.Label>
              <InputGroup>
                <Form.Control
                  required
                  type="text"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω"
                  value={loginname}
                  onChange={(e) => setLoginname(e.target.value)}
                  onBlur={handleBlur}
                  isInvalid={!!errors.loginname}
                  ref={loginInputRef} // –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –ø–æ–ª—è —Å ref
                />
                <Form.Control.Feedback type="invalid">
                  {errors.loginname || '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'}
                </Form.Control.Feedback>
              </InputGroup>
            </Form.Group>

            {/* –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è */}
            <Form.Group controlId="formPassword" className="mb-3">
              <Form.Label>–ü–∞—Ä–æ–ª—å</Form.Label>
              <InputGroup>
                <Form.Control
                  required
                  type="password"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  onBlur={handleBlur}
                  isInvalid={!!errors.password}
                />
                <Form.Control.Feedback type="invalid">
                  {errors.password || '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.'}
                </Form.Control.Feedback>
              </InputGroup>
            </Form.Group>

            {/* –û—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ */}
            {serverError && (
              <Alert variant="danger" className="mt-3">
                {serverError}
              </Alert>
            )}

            {/* –ö–Ω–æ–ø–∫–∏ */}
            <div className="d-flex justify-content-between">
              <Button type="submit" variant="primary">
                –í–æ–π—Ç–∏
              </Button>
              <Button variant="secondary" type="button" onClick={handleRegister}>
                –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
              </Button>
            </div>

            <div className="mt-3 text-center">
              <Button variant="link" type="button" onClick={handleRestorePassword}>
                –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å
              </Button>
            </div>
          </Form>
        </Col>
      </Row>
    </Container>
  );
};

export default Login;