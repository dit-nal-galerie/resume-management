const API_URL = 'http://localhost:3001';
import { User } from '../../../interfaces/User';
import { Resume } from "../../../interfaces/Resume";
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const createOrUpdateUser = async (userData: User): Promise<string> => {
  const response = await fetch(`${API_URL}/createOrUpdateUser`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(userData),
  });

  if (!response.ok) {
    const errorText = await response.text();
  throw new Error(`Serverfehler: ${errorText}`);

  }

  return await response.text();
};

// API —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ API
interface ApiResponse {
  success: boolean;
  message?: string;
  error?: string;
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
 * @param loginname –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param email Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export const requestPasswordReset = async (loginname: string, email: string): Promise<ApiResponse> => {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API
    // const response = await fetch('/api/request-password-reset', {
    //   method: 'POST',
    //   headers: {
    //     'Content-Type': 'application/json',
    //   },
    //   body: JSON.stringify({ loginname, email }),
    // });
    // const data = await response.json();
    // return data;

    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    return {
      success: true,
      message: "E-Mail mit Anweisungen wurde gesendet"
    };
    
    // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
    // return {
    //   success: false,
    //   error: "Benutzer mit dieser E-Mail-Adresse wurde nicht gefunden"
    // };
  } catch (error) {
    console.error("API error:", error);
    return {
      success: false,
      error: "Serverfehler. Bitte versuchen Sie es sp√§ter erneut."
    };
  }
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
 * @param token –¢–æ–∫–µ–Ω –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
 * @param newPassword –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export const resetPassword = async (token: string, newPassword: string): Promise<ApiResponse> => {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API
    // const response = await fetch('/api/reset-password', {
    //   method: 'POST',
    //   headers: {
    //     'Content-Type': 'application/json',
    //   },
    //   body: JSON.stringify({ token, newPassword }),
    // });
    // const data = await response.json();
    // return data;

    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    return {
      success: true,
      message: "Passwort wurde erfolgreich zur√ºckgesetzt"
    };
    
    // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
    // return {
    //   success: false,
    //   error: "Ung√ºltiger Token oder abgelaufener Link"
    // };
  } catch (error) {
    console.error("API error:", error);
    return {
      success: false,
      error: "Serverfehler. Bitte versuchen Sie es sp√§ter erneut."
    };
  }
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
 * @param token –¢–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
export const validateToken = async (token: string): Promise<ApiResponse> => {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API
    // const response = await fetch(`/api/validate-token?token=${token}`, {
    //   method: 'GET',
    //   headers: {
    //     'Content-Type': 'application/json',
    //   }
    // });
    // const data = await response.json();
    // return data;

    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω
    if (!token) {
      return {
        success: false,
        error: "Token ist erforderlich"
      };
    }
    
    // –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
    return {
      success: true,
      message: "Token ist g√ºltig"
    };
  } catch (error) {
    console.error("API error:", error);
    return {
      success: false,
      error: "Fehler bei der Token√ºberpr√ºfung"
    };
  }
};



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const login = async (loginname: string, password: string) => {
  console.log("üîπ API-Aufruf mit loginname:", loginname, "und Passwort:"  ,password);

  const response = await fetch(`${API_URL}/login`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ loginname, password }),
  });

  if (!response.ok) {
    throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
  }

  return await response.json();
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserData = async (loginid: number): Promise<User[]> => {
  const response = await fetch(`${API_URL}/getUserData`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ loginid }),
  });

  if (!response.ok) {
    throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }

  return await response.json();
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const updateUserData = async (loginId:number, userData: User): Promise<string> => {
  

  if (!loginId) {
    throw new Error("Fehler: Kein loginId gefunden. Bitte erneut einloggen.");
  }

  console.log("üîπ API-Aufruf mit loginId:", loginId, "und Daten:", JSON.stringify(userData));

  const requestBody: any = {
    loginid: loginId,
    name: userData.name,
    email: userData.email,
    city: userData.city,
    street: userData.street,
    houseNumber: userData.houseNumber,
    postalCode: userData.postalCode,
    phone: userData.phone,
    mobile: userData.mobile,
    anrede: userData.anrede,
  };

  if (userData.password) {
    requestBody.password = userData.password;
  }

  const response = await fetch(`${API_URL}/createOrUpdateUser`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(requestBody),
  });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`Fehler bei der Benutzeraktualisierung: ${errorText}`);
  }

  // ‚úÖ Nutzerprofil in `localStorage` speichern, wenn Update erfolgreich war
  localStorage.setItem("user", JSON.stringify(userData));

  return await response.text();
};
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π (Anrede)
export const getAnrede = async (): Promise<{ id: number; text: string }[]> => {
  const response = await fetch(`${API_URL}/getAnrede`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
    },
  });

  if (!response.ok) {
    throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö anrede');
  }

  return await response.json();
};

export const getResumesWithUsers = async (userid: number): Promise<any[]> => {
  const response = await fetch(`${API_URL}/getResumesWithUsers?userid=${userid}`, {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
    },
  });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`Serverfehler: ${errorText}`);
  }

  return await response.json();
};

export const getResumeById = async (id: number): Promise<Resume> => {
 console.log("üîπ 123 API-Aufruf mit ID:", id);
  const response = await fetch(`${API_URL}/getResumeById/${id}`, {
    method: "GET",
    headers: { "Content-Type": "application/json" },
  });

  if (!response.ok) {
    throw new Error(`Serverfehler: ${await response.text()}`);
  }

  return await response.json();
};
export const updateOrCreateResume = async (resume: Resume): Promise<void> => {
  const response = await fetch(`${API_URL}/updateOrCreateResume`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(resume),
  });

  if (!response.ok) {
    throw new Error(`Fehler beim Speichern der Bewerbung: ${response.statusText}`);
  }
};

export const getStates = async (): Promise<{ stateid: number; text: string }[]> => {
  const response = await fetch(`${API_URL}/getStates`, {
    method: "GET",
    headers: { "Content-Type": "application/json" },
  });

  if (!response.ok) {
    throw new Error("Fehler beim Laden der Status.");
  }

  return await response.json();
};

import { Contact } from "../../../interfaces/Contact";
import { Company } from '../../../interfaces/Company';
import { HistoryEntry } from '../../../interfaces/histori';

export const createOrUpdateContact = async (contact: Contact): Promise<void> => {
  // Setzt `contactid` auf 0, falls er nicht vorhanden ist (neuer Kontakt)
  const contactData = { ...contact, contactid: contact.contactid ?? 0 };

  const response = await fetch(`${API_URL}/createOrUpdateContact`, {
    method: "POST", // Backend entscheidet automatisch, ob Insert oder Update
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(contactData),
  });

  if (!response.ok) {
    throw new Error("Fehler beim Speichern oder Aktualisieren des Kontakts: " + await response.text());
  }
};


export const getCompanies = async (loginId: number, isRecruter: boolean): Promise<Company[]> => {
  console.log("üîπ API-Aufruf getCompanies mit loginId:", loginId, "und isRecruter:", isRecruter);
  const response = await fetch(`${API_URL}/companies?loginId=${loginId}&isRecruter=${isRecruter||false}`, {
    method: "GET",
    headers: { "Content-Type": "application/json" },
  });

  if (!response.ok) {
    throw new Error(`Fehler beim Abrufen der Firmen: ${await response.text()}`);
  }

  return await response.json();
};
export const getContacts = async (loginId: number, companyId: number): Promise<Contact[]> => {
  const response = await fetch(`${API_URL}/contacts?ref=${loginId}&company=${companyId}`, {
    method: "GET",
    headers: { "Content-Type": "application/json" },
  });

  if (!response.ok) {
    throw new Error(`Fehler beim Abrufen der Kontakte: ${await response.text()}`);
  }

  return await response.json();
};

export const getHistoryByResumeId = async (resumeId: number, refId: number): Promise<HistoryEntry[]> => {
    const url = `${API_URL}/getHistoryByResumeId?resumeId=${resumeId}&refId=${refId}`;
    const response = await fetch(url, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json',
        },
    });

    if (!response.ok) {
        throw new Error(`Failed to fetch history: ${response.status}`);
    }
    return response.json();
};
export const changeResumeStatus = async (
  resumeId: number,
  userId: number,
  stateId: number,
  date: string
): Promise<void> => {
    const url = `${API_URL}/changeResumeStatus`;
  const response = await fetch(url, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ resumeId, userId, stateId, date }),
  });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(errorText || "Fehler beim √Ñndern des Status");
  }
};

interface UpdateAccessDataResponse {
  success?: boolean;
  message?: string;
  user?: User;
}

export const updateAccessData = async (data: {
  userId: number;
  loginname: string;
  email: string;
  oldPassword: string;
  newPassword?: string;
  password2?: string;
  changePassword: boolean;
}): Promise<UpdateAccessDataResponse> => {
  const url = `${API_URL}/changeAccessData`;

  try {
    const res = await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(data),
    });

    const result = await res.json();

    if (!res.ok) {
      return {
        success: false,
        message: result.message || "Fehler beim Speichern",
      };
    }

    return {
      success: true,
      message: result.message,
      user: result.user, // vom Backend zur√ºckgegeben
    };
  } catch (error) {
    console.error("API-Fehler:", error);
    return {
      success: false,
      message: "Serverfehler oder keine Verbindung: \n" + error,
    };
  }
};

